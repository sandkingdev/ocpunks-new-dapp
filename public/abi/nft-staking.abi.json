{
    "buildInfo": {
        "rustc": {
            "version": "1.66.0-nightly",
            "commitHash": "f83e0266cf7aaa4b41505c49a5fd9c2363166522",
            "commitDate": "2022-10-03",
            "channel": "Nightly",
            "short": "rustc 1.66.0-nightly (f83e0266c 2022-10-03)"
        },
        "contractCrate": {
            "name": "nft-staking",
            "version": "0.0.0"
        },
        "framework": {
            "name": "elrond-wasm",
            "version": "0.30.0"
        }
    },
    "docs": [
        "One of the simplest smart contracts possible,",
        "it holds a single variable in storage, which anyone can increment."
    ],
    "name": "OrcpunkNftStaking",
    "constructor": {
        "inputs": [
            {
                "name": "reward_egld_token_id",
                "type": "TokenIdentifier"
            },
            {
                "name": "egld_reward_apr",
                "type": "u64"
            }
        ],
        "outputs": []
    },
    "endpoints": [
        {
            "name": "stake",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "name": "unstake",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "stake_nft_token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "nft_nonce",
                    "type": "u64"
                },
                {
                    "name": "nft_amount",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "claim",
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "claimZog",
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "claimEgld",
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "getCurrentReward",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "tuple<BigUint,BigUint>"
                }
            ]
        },
        {
            "name": "injectRewards",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "name": "getAccount",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "variadic<StakedInfo>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getRewardInfo",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "RewardInfo"
                }
            ]
        },
        {
            "name": "withdraw",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "opt_token_id",
                    "type": "optional<TokenIdentifier>",
                    "multi_arg": true
                },
                {
                    "name": "opt_token_amount",
                    "type": "optional<BigUint>",
                    "multi_arg": true
                },
                {
                    "name": "opt_token_nonce",
                    "type": "optional<u64>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "addStakeNftTokneIds",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "stake_nft_token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": []
        },
        {
            "name": "removeStakeNftTokneIds",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "stake_nft_token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": []
        },
        {
            "name": "clearStakeNftTokneIds",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "setRewardZogTokenId",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "reward_zog_token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": []
        },
        {
            "name": "setRewardLkmexTokenId",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "reward_lkmex_token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": []
        },
        {
            "name": "setRewardPerNft",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "stake_nft_token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "reward_token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "reward_per_nft",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "setRewardApr",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "zog_reward_apr",
                    "type": "u64"
                },
                {
                    "name": "lkmex_reward_apr",
                    "type": "u64"
                }
            ],
            "outputs": []
        },
        {
            "name": "getStakeNftTokenIds",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<TokenIdentifier>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getRewardZogTokenId",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                }
            ]
        },
        {
            "name": "getRewardLkmexTokenId",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                }
            ]
        },
        {
            "name": "getLkmexTokens",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<multi<u64,BigUint>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getRewardPerNft",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "stake_nft_token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "reward_token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getZogRewardApr",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getLkmexRewardApr",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getPasued",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "name": "getTotalSupply",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "geNftSupply",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "stake_nft_token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getReward",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                },
                {
                    "name": "reward_token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getBalance",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                },
                {
                    "name": "stake_nft_token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": [
                {
                    "type": "variadic<u64>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getLastUpdateTimestamps",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getEgldRewardApr",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getRewardEgldTokenId",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                }
            ]
        },
        {
            "name": "getRewardEgldStartTime",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        }
    ],
    "hasCallback": false,
    "types": {
        "RewardInfo": {
            "type": "struct",
            "fields": [
                {
                    "name": "total_supply",
                    "type": "BigUint"
                },
                {
                    "name": "zog_reward_amount",
                    "type": "BigUint"
                },
                {
                    "name": "egld_reward_amount",
                    "type": "BigUint"
                }
            ]
        },
        "StakedInfo": {
            "type": "struct",
            "fields": [
                {
                    "name": "supply_by_id",
                    "type": "BigUint"
                },
                {
                    "name": "stake_nft_token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "stake_nft_token_nonce",
                    "type": "u64"
                }
            ]
        }
    }
}
